<?php

/**
 * @file
 * Display user social river.
 * based on the excellent jQuery plugin by christianv (Christian Vuerings)
 * https://github.com/christianv/jquery-lifestream
 */

/**
 * Implements hook_perm().
 */
function social_river_perm() {
  return array('administer social river', 'view own social river', 'view all social rivers',
               'set own social river settings', 'view custom social river blocks');
}

/**
 * Implements hook_init().
 */
function social_river_init() {
  drupal_add_css(drupal_get_path('module', 'social_river') . '/css/lifestream.css');
  // Get the path for the the lifestream plugin.
  if ($path = libraries_get_path('jquery-lifestream')) {
    drupal_add_js($path . '/jquery.lifestream.js');
  }
  // Autofill module support.
  $path = drupal_get_path('module', 'social_river');
  if (module_exists('autofill')) {
    drupal_add_js($path . '/js/autofill_support.js');
  }

  if (module_exists('timeago')) {
    drupal_add_js(drupal_get_path('module', 'timeago') . '/jquery.timeago.js');
  }
}

/**
 * Implements hook_menu().
 */
function social_river_menu() {
  $items['user/%user/edit/social_river'] = array(
    'title' => 'Social River',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_river_user_settings_form'),
    'access arguments' => array('set own social river settings'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/social_river'] = array(
    'title' => 'Social River',
    'description' => 'Configure global settings for Social River module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_river_settings_form'),
    'access arguments' => array('administer social river'),
    'file' => 'social_river.admin.inc',
  );

  // Autofill module support.
  $path = drupal_get_path('module', 'social_river');
  if (module_exists('autofill')) {
    $items[$path . '/js/autofill_support.js'] = array(
      'title' => 'Autofill support JS',
      'page callback' => 'social_river_autofill_support',
      'type' => MENU_CALLBACK,
      'access arguments' => array(TRUE),
    );
  }
  return $items;
}

/**
 * Implements hook_block().
 */
function social_river_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Social River - User Page');

      // Specify custom amount of blocks.
      $number = variable_get('social_river_block_number', 1);
      for ($i = 1; $i <= $number; $i++) {
        $blocks[$i]['info'] = t('Social river - Custom ' . $i);
        $blocks[$i]['cache'] = BLOCK_NO_CACHE;
      }
      return $blocks;

    case 'configure':
      if ($delta > 0) {
        $form = array();
        return _social_river_block_settings_form($form, $delta);
      }
      break;

    case 'save':
      $data = $edit['block_settings']['social_river_block_settings'];
      variable_set('social_river_block_'. $delta, $data);
      return;

    case 'view':
      if ($delta == 0) {
        $river = _social_river_get_river_code($user->uid);
        $block['subject'] = t('Social River');
        $block['content'] = $river;
        return $block;
      } else {
        $river = _social_river_get_river_block_code($delta);
        $block['subject'] = t('Social River');
        $block['content'] = $river;
        return $block;
      }
      break;
  }
}

/**
 * User settings form.
 */
function social_river_user_settings_form() {
  $service_list = social_river_services();
  drupal_set_title(t('Social river settings'));

  $form = array();
  $form['#tree'] = TRUE;

  /*
   * Array of services we allow, key = service name  value = help link.
   * (where necessary otherwise blank)
   */
  $services_enabled = variable_get('social_river_services_enabled', array());
  $form['social_river_user_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Services'),
    '#description' => t('Provide usernames for each of the services that you wish to appear on your social river.'),
  );

  // Print all available services for the user.
  $has_services = FALSE;
  foreach ($service_list as $service => $data) {
    $user_value = _social_river_get_user_service($service);
    $default = '';
    if ($user_value) {
      $default = $user_value['service_username'];
      // Set flag for preview.
      if (!$has_services)
        $has_services = TRUE;
    }
    if ($services_enabled[$service]) {
      $form['social_river_user_settings'][$service] = array(
        '#title' => $data['title'],
        '#type' => 'textfield',
        '#description' => $data['description'],
        '#default_value' => $default,
      );
    }
  }

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  // Preview for social river forms.
  $preview = variable_get('social_river_preview', 0);
  if (!empty($preview) && $has_services) {
    $block = module_invoke('social_river', 'block', 'view', 0);
    $form['preview'] = array(
      '#type' => 'fieldset',
      '#title' => t('Preview'),
    );
    $form['preview']['preview_data'] = array(
      '#value' => $block['content'],
    );
  }
  return $form;
}

/**
 * User settings form.
 */
function _social_river_block_settings_form($form, $delta) {
  $form['#tree'] = TRUE;
  $services = social_river_services();
  $services_enabled = variable_get('social_river_services_enabled', array());
  $form['social_river_block_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Services'),
    '#description' => t('Provide usernames for each of the services that you wish to appear on this block.'),
  );

  // Print all available services for the block.
  $block_services = _social_river_get_block_services($delta);
  foreach ($services as $service => $data) {
    if ($services_enabled[$service]) {
      $form['social_river_block_settings'][$service] = array(
        '#title' => $data['title'],
        '#type' => 'textfield',
        '#description' => $data['description'],
        '#default_value' => !empty($block_services[$service]) ? $block_services[$service] : '',
      );
    }
  }
  return $form;
}

/**
 * Submit handler function for admin settings form.
 */
function social_river_user_settings_form_submit($form, &$form_state) {
  global $user;

  // Empty user settings in db.
  _social_river_empty_user_service($user->uid);

  $services = $form_state['values']['social_river_user_settings'];
  foreach ($services as $service => $service_username) {
    if ($service != str_replace(' ', '_', strtolower($service_username)) && !empty($service)) {
      _social_river_save_service($service, $service_username);
    }
  }
  drupal_set_message(t('Data has been saved.'));
}

/**
 * Remove service from a user's settings.
 */
function _social_river_delete_service($service) {
  global $user;
  db_query('DELETE FROM {social_river} WHERE uid = %d and service_name = "%s"', $user->uid, $service);
}

/**
 * Add settings for a service to a user's settings.
 */
function _social_river_save_service($service, $service_username, $data = '') {
  global $user;

  if (!empty($service) && !empty($service_username)) {
    db_query('INSERT INTO {social_river} SET uid=%d, service_name="%s", service_username="%s", data="%s"',
      $user->uid,
      $service,
      $service_username,
      serialize($data)
    );
  }
}

/**
 * Delete all user service settings.
 */
function _social_river_empty_user_service($uid) {
    db_query('DELETE FROM {social_river} WHERE uid=%d', $uid);
}

/**
 * Fetch user setting for a particular service.
 */
function _social_river_get_user_service($service) {
  global $user;
  $result = db_query('SELECT * FROM {social_river} WHERE uid=%d and service_name="%s"', $user->uid, $service);
  if ($row = db_fetch_array($result)) {
      return $row;
  }
  else {
      return FALSE;
  }
}

/**
 * Fetch all user services.
 */
function _social_river_get_user_services($uid) {

  $result = db_query('SELECT * FROM {social_river} WHERE uid=%d', $uid);

  $services = array();
  while ($row = db_fetch_array($result)) {
      $services[$row['service_name']] = $row;
  }

  return $services;
}

/**
 * Return code of a wall.
 */
function _social_river_get_river_code($uid) {
  global $user;

  $output = '';
  if ((!user_access('view own social river') && !user_access('view all social rivers')) ||
        (user_access('view own social river') && $uid != $user->uid)
  ) {
    return $output;
  }

  $services = _social_river_get_user_services(arg(1));

  // Create js services list.
  $js_service_list = array();
  foreach ($services as $service) {
    if (!empty($service['service_name']) && !empty($service['service_username'])) {
      $js_service_list[] = "{ service: '" . check_plain(strtolower($service['service_name'])) . "', user: '" .
        check_plain($service['service_username']) . "' }";
    }
  }

  if (!empty($js_service_list)) {
    $output .= "<div id=\"social_river_" . $uid . "\">&nbsp;</div><script type=\"text/javascript\">
    (function(){
      var count = 0,
      list = [  " . implode(",", $js_service_list) .  "  ];

      Date.prototype.toISO8601 = function(date) {
          var pad = function (amount, width) {
              var padding = '';
              while (padding.length < width - 1 && amount < Math.pow(10, width - padding.length - 1))
                  padding += '0';
              return padding + amount.toString();
          }
          date = date ? date : new Date();
          var offset = date.getTimezoneOffset();
          return pad(date.getFullYear(), 4)
              + '-' + pad(date.getMonth() + 1, 2)
              + '-' + pad(date.getDate(), 2)
              + 'T' + pad(date.getHours(), 2)
              + ':' + pad(date.getMinutes(), 2)
              + ':' + pad(date.getUTCSeconds(), 2)
              + (offset > 0 ? '-' : '+')
              + pad(Math.floor(Math.abs(offset) / 60), 2)
              + ':' + pad(Math.abs(offset) % 60, 2);
        };

      $('#social_river_" . $uid . "').lifestream({
        limit: " . variable_get('social_river_feed_limit', 10) . ",
        list: list,
        feedloaded: function(){
          count++;
          // Check if all the feeds have been loaded
          if( count === list.length ){
            $('#social_river_" . $uid . " li').each(function(){
              var element = $(this),
                  date = new Date(element.data('time'));
              element.append(' <abbr class=\"timeago\" title=\"' + date.toISO8601(date) + '\">' + date + \"</abbr>\");
            })
            if(jQuery().timeago) {
              $('#social_river_" . $uid . " .timeago').timeago();
            }
          }
        }
      });

    })();
    </script>";
    return $output;
  }

  return '';
}

/**
 * Return code of a wall.
 */
function _social_river_get_river_block_code($delta) {
  // Check to see if the user may view this stream.
  if (!user_access('view custom social river blocks'))
    return '';

  global $user;
  $block_services = variable_get('social_river_block_'. $delta, array());
  $output = '';

  // Create js services list.
  $js_service_list = array();
  foreach ($block_services as $service => $value) {
    if (!empty($service) && !empty($value)) {
      $js_service_list[] = "{ service: '" . check_plain($service) . "', user: '" .
        check_plain($value) . "' }";
    }
  }

  if (!empty($js_service_list)) {
    $output .= "<div id=\"social_river_block_" . $delta . "\">&nbsp;</div><script type=\"text/javascript\">
    (function(){
      var count = 0,
      list = [  " . implode(",", $js_service_list) .  "  ];

      Date.prototype.toISO8601 = function(date) {
          var pad = function (amount, width) {
              var padding = '';
              while (padding.length < width - 1 && amount < Math.pow(10, width - padding.length - 1))
                  padding += '0';
              return padding + amount.toString();
          }
          date = date ? date : new Date();
          var offset = date.getTimezoneOffset();
          return pad(date.getFullYear(), 4)
              + '-' + pad(date.getMonth() + 1, 2)
              + '-' + pad(date.getDate(), 2)
              + 'T' + pad(date.getHours(), 2)
              + ':' + pad(date.getMinutes(), 2)
              + ':' + pad(date.getUTCSeconds(), 2)
              + (offset > 0 ? '-' : '+')
              + pad(Math.floor(Math.abs(offset) / 60), 2)
              + ':' + pad(Math.abs(offset) % 60, 2);
        };

      $('#social_river_block_" . $delta . "').lifestream({
        limit: " . variable_get('social_river_feed_limit', 10) . ",
        list: list,
        feedloaded: function(){
          count++;
          // Check if all the feeds have been loaded
          if( count === list.length ){
            $('#social_river_block_" . $delta . " li').each(function(){
              var element = $(this),
                  date = new Date(element.data('time'));
              element.append(' <abbr class=\"timeago\" title=\"' + date.toISO8601(date) + '\">' + date + \"</abbr>\");
            })
            if(jQuery().timeago) {
              $('#social_river_block_" . $delta . " .timeago').timeago();
            }
          }
        }
      });

    })();
    </script>";
    return $output;
  }

  return '';
}

/**
 * Returns an array containing the list of services currently supported
 * by jQuery lifestream, full name, and help text and autofill data associated with the services.
 */
function social_river_services() {
  $list = array();

  $list['bitbucket'] = array(
    'title' => t('Bitbucket'),
    'description' => 'Please supply your Bitbucket username.',
    'autofill' => 'Bitbucket username',
  );

  $list['bitly'] = array(
    'title' => t('Bitly'),
    'description' => 'Please supply your Bitly username.',
    'autofill' => 'Bitly username',
  );

  $list['blogger'] = array(
    'title' => t('Blogger'),
    'description' => 'Please supply your Blogger username.',
    'autofill' => 'Blogger username',
  );

  $list['dailymotion'] = array(
    'title' => t('Dailymotion'),
    'description' => 'Please supply your Dailymotion username.',
    'autofill' => 'Dailymotion username',
  );

  $list['delicious'] = array(
    'title' => t('Delicious'),
    'description' => 'Please supply your Delicious username.',
    'autofill' => 'Delicious username',
  );

  $list['deviantart'] = array(
    'title' => t('Deviantart'),
    'description' => 'Please supply your Deviantart username.',
    'autofill' => 'Deviantart username',
  );

  $list['dribbble'] = array(
    'title' => t('Dribbble'),
    'description' => 'Please supply your Dribbble username.',
    'autofill' => 'Dribbble username',
  );

  $list['facebook'] = array(
    'title' => t('Facebook'),
    'description' => 'Please supply your Facebook page ID, ' . l('http://rieglerova.net/how-to-get-a-facebook-fan-page-id/', 'click here') . ' for more info.',
    'autofill' => 'Facebook page ID',
  );

  $list['flickr'] = array(
    'title' => t('Flickr'),
    'description' => 'Please supply your Flickr ID, ' . l('click here', 'http://idgettr.com/') . ' for more info.',
    'autofill' => 'Flickr ID',
  );

  $list['foursquare'] = array(
    'title' => t('Foursquare'),
    'description' => 'Please supply your Foursquare feed ID, ' . l('click here', 'http://www.cl.ly/7TEJ') . '.',
    'autofill' => 'Foursquare feed ID',
  );

  $list['foomark'] = array(
    'title' => t('Foomark'),
    'description' => 'Please supply your Foomark username.',
    'autofill' => 'Foomark username',
  );

  $list['formspring'] = array(
    'title' => t('Formspring'),
    'description' => 'Please supply your Formspring username.',
    'autofill' => 'Formspring username',
  );

  $list['forrst'] = array(
    'title' => t('Forrst'),
    'description' => 'Please supply your Forrst username.',
    'autofill' => 'Forrst username',
  );

  $list['gimmebar'] = array(
    'title' => t('Gimmebar'),
    'description' => 'Please supply your Gimmebar username.',
    'autofill' => 'Gimmebar username',
  );

  $list['github'] = array(
    'title' => t('Github'),
    'description' => 'Please supply your Github username.',
    'autofill' => 'Github username',
  );

  $list['googleplus'] = array(
    'title' => t('Googleplus'),
    'description' => 'Please supply your Googleplus username.',
    'autofill' => 'Googleplus username',
  );

  $list['googlereader'] = array(
    'title' => t('Googlereader'),
    'description' => 'Please supply your Googlereader feed ID.',
    'autofill' => 'Googlereader feed ID',
  );

  $list['instapaper'] = array(
    'title' => t('Instapaper'),
    'description' => 'Please supply your Instapaper username.',
    'autofill' => 'Instapaper username',
  );

  $list['iusethis'] = array(
    'title' => t('Iusethis'),
    'description' => 'Please supply your Iusethis username.',
    'autofill' => 'Iusethis username',
  );

  $list['lastfm'] = array(
    'title' => t('Lastfm'),
    'description' => 'Please supply your Lastfm username.',
    'autofill' => 'Lastfm username',
  );

  $list['mlkshk'] = array(
    'title' => t('Mlkshk'),
    'description' => 'Please supply your Mlkshk username.',
    'autofill' => 'Mlkshk username',
  );

  $list['picplz'] = array(
    'title' => t('Picplz'),
    'description' => 'Please supply your Picplz username.',
    'autofill' => 'Picplz username',
  );

  $list['pinboard'] = array(
    'title' => t('Pinboard'),
    'description' => 'Please supply your Pinboard username.',
    'autofill' => 'Pinboard username',
  );

  $list['posterous'] = array(
    'title' => t('Posterous'),
    'description' => 'Please supply your Posterous username.',
    'autofill' => 'Posterous username',
  );

  $list['reddit'] = array(
    'title' => t('Reddit'),
    'description' => 'Please supply your Reddit username.',
    'autofill' => 'Reddit username',
  );

  $list['rss'] = array(
    'title' => t('RSS'),
    'description' => 'Please supply the feed URL.',
    'autofill' => 'Feed URL',
  );

  $list['slideshare'] = array(
    'title' => t('Slideshare'),
    'description' => 'Please supply your Slideshare username.',
    'autofill' => 'Slideshare username',
  );

  $list['snipplr'] = array(
    'title' => t('Snipplr'),
    'description' => 'Please supply your Snipplr username.',
    'autofill' => 'Snipplr username',
  );

  $list['stackoverflow'] = array(
    'title' => t('Stackoverflow'),
    'description' => 'Please supply your Stackoverflow id, ' . l('click here', 'http://f.cl.ly/items/0a3K2Z42442l3d030g0E/stackoverflow.png') . ' for more info.',
    'autofill' => 'Stackoverflow username',
  );

  $list['tumblr'] = array(
    'title' => t('Tumblr'),
    'description' => 'Please supply your Tumblr username.',
    'autofill' => 'Tumblr username',
  );

  $list['twitter'] = array(
    'title' => t('Twitter'),
    'description' => 'Please supply your Twitter username.',
    'autofill' => 'Twitter username',
  );

  $list['vimeo'] = array(
    'title' => t('Vimeo'),
    'description' => 'Please supply your Vimeo username.',
    'autofill' => 'Vimeo username',
  );

  $list['wordpress'] = array(
    'title' => t('Wordpress'),
    'description' => 'Please supply your Wordpress username.',
    'autofill' => 'Wordpress username',
  );

  $list['youtube'] = array(
    'title' => t('Youtube'),
    'description' => 'Please supply your Youtube username.',
    'autofill' => 'Youtube username',
  );

  $list['zotero'] = array(
    'title' => t('Zotero'),
    'description' => 'Please supply your Zotero username.',
    'autofill' => 'Zotero username',
  );
  return $list;
}

/**
 * Generates js behaviours to allow for support of the autofill module
 */
function social_river_autofill_support() {
  $services_enabled = variable_get('social_river_services_enabled', array());
  $default_color = check_plain(variable_get('autofill_colour_default', '#ccc'));
  $active_color = check_plain(variable_get('autofill_colour_active', '#333'));

  $output = 'Drupal.behaviors.social_river_autofill = function(context) {';

  foreach ($services_enabled as $service => $data) {
    $user_value = _social_river_get_user_service($service);
    if(empty($user_value)) {
      $output .= "\n" . '$("#edit-social-river-user-settings-' . $service . '").autofill({';
      $output .= "\n\t" . 'value: "' . $data['autofill'] . '",';
      $output .= "\n\t" . 'prePopulate: "",';
      $output .= "\n\t" . 'defaultTextColor: "' . $default_color . '",';
      $output .= "\n\t" . 'activeTextColor: "' . $active_color . '"';
      $output .= "\n" . '});';
    }
  }
  $output .= '}';

  header('Content-type: text/javascript;');
  echo $output;
  exit();
}

/**
 * Implementation of hook_user().
 */
function social_river_user($op, &$edit, &$user, $category = NULL) {
 switch ($op) {
    case 'categories':
      return array(
        array(
          'name' => 'social_river',
          'title' => t('Social River'),
        ),
      );
  }
}

/**
 * Configuration of the provided block
 *
 * @param $delta
 *   block number
 * @return
 *   array with the block configuration or FALSE if no such block was found
 */
function _social_river_get_block_services($delta) {
  if ($data = variable_get('social_river_block_'. $delta, array())) {
    return $data;
  }
  return FALSE;
}